#!/usr/bin/env python3
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Copyright (C) 2024  Lamberto Grippi <lamberto.grippi@scs.ch>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

import re
import argparse
import requests
from functools import cached_property


class CheckDiffCFG(object):
    def __init__(self):
        self.parse_arguments()

    def check(self):
        try:
            if self.git_config.splitlines() == self.render_config.splitlines():
                print("OK: commit and render config match")
                return 0
            else:
                print("WARNING: commit config differs from render config")
                return 1
        except Exception as e:
            print(f"UNKNOWN: {e}")
            return 3

    def parse_arguments(self):
        parser = argparse.ArgumentParser()
        parser.add_argument("-H", "--host", required=True, help="Hostname for login")
        parser.add_argument("-n", "--netbox", required=True, help="FQDN of Netbox Config Server")
        parser.add_argument("-s", "--server", required=True, help="URL of Config File")
        parser.add_argument("--netbox-token", required=True, help="API Access Token for Netbox Config Server login")
        parser.add_argument("--server-token", required=False, help="API Access Token for HTTP Server login")
        parser.add_argument("-i", "--ignore", required=False, nargs="*", action='extend', type=str, default=[], help="Regular expression to ignore Lines")
        parser.add_argument("-d", "--debug", action="store_true", default=False)
        self.args = parser.parse_args()

    @cached_property
    def git_config(self):
        headers={ 'accept': 'application/json', 
                  'Authorization': f'token {self.args.server_token}' }
        cfg = requests.get(self.args.server, headers=headers).text
        return self.exclude_lines(cfg)

    @cached_property
    def session(self):
        s = requests.Session()
        s.headers.update({'Authorization': f'Token {self.args.netbox_token}'})
        return s

    @cached_property
    def render_config(self):
        device = self.args.host
        apiurl = f"https://{self.args.netbox}/api/dcim"

        vc = self.session.get(f"{apiurl}/virtual-chassis/", params=dict(name=device)).json()

        if vc['results']:
            deviceid = vc['results'][0]['master']['id']
        else:
            dev = self.session.get(f"{apiurl}/devices/", params=dict(name=device)).json()
            deviceid = dev['results'][0]['id']

        rendercfg = (self.session.post(f"{apiurl}/devices/{deviceid}/render-config/?format=json")).json()['content']

        return self.exclude_lines(rendercfg)

    def exclude_lines(self, text):
        for item in self.args.ignore:
            text = (re.sub(item, '', text, flags=re.I | re.M))

        if self.args.debug:
            print("---------------------------------------------------------------------------")
            print(f"{text.strip()}")

        return text.strip()


if __name__ == "__main__":
    check = CheckDiffCFG()
    exit(check.check())
